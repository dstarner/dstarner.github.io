{"version":3,"sources":["images/toaster.gif","app/Icon.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","library","add","fab","fas","Icon","react_default","a","createElement","className","concat","this","props","big","href","link","react_fontawesome_index_es","icon","React","Component","taglines","icons","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","timer","tagline","index","getTagline","bind","assertThisInitialized","setInterval","tick","setState","clearInterval","length","src","logo","alt","style","marginBottom","id","map","app_Icon","assign","key","Boolean","window","location","hostname","match","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,ySCMxCC,IAAQC,IAAIC,IAAKC,SAYFC,mLARP,OACIC,EAAAC,EAAAC,cAAA,KAAGC,UAAS,QAAAC,OAAUC,KAAKC,MAAMC,IAAM,MAAQ,IAAMC,KAAMH,KAAKC,MAAMG,MAClET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAiBC,KAAMN,KAAKC,MAAMK,eAJ/BC,IAAMC,WCFnBC,EAAW,CACf,6BACA,qCACA,0BACA,mCAGIC,EAAQ,CACZ,CAACJ,KAAM,CAAC,MAAO,aAAcF,KAAM,yCACnC,CAACE,KAAM,CAAC,MAAO,WAAYF,KAAM,kCACjC,CAACE,KAAM,CAAC,MAAO,YAAaF,KAAM,wCAClC,CAACE,KAAM,CAAC,MAAO,OAAQF,KAAM,0BAA2BF,KAAK,GAC7D,CAACI,KAAM,CAAC,MAAO,cAAeF,KAAM,8BAA+BF,KAAK,GACxE,CAACI,KAAM,CAAC,MAAO,UAAWF,KAAM,+BAChC,CAACE,KAAM,CAAC,MAAO,YAAaF,KAAM,2CAClC,CAACE,KAAM,CAAC,MAAO,YAAaF,KAAM,qCA0DrBO,cArDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,QACKkB,MAAQ,CACXC,MAAO,KACPC,QAASX,EAAS,GAClBY,MAAO,GAGTT,EAAKU,WAAaV,EAAKU,WAAWC,KAAhBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARNA,mFAYZ,IAAIO,EAAQM,YAAYzB,KAAK0B,KAAKH,KAAKvB,MAAO,KAC9CA,KAAK2B,SAAS,CAACR,yDAIfnB,KAAK4B,cAAc5B,KAAKkB,MAAMC,sCAI9BnB,KAAK2B,SAAS,CACZP,QAASpB,KAAKsB,oDAKhB,IAAID,EAAQrB,KAAKkB,MAAMG,MAAQ,EAG/B,OAFIA,IAAUZ,EAASoB,SAAQR,EAAQ,GACvCrB,KAAK2B,SAAS,CAACN,UACRZ,EAAST,KAAKkB,MAAMG,wCAI3B,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKiC,IAAKC,IAAMjC,UAAU,WAAWkC,IAAI,SACzCrC,EAAAC,EAAAC,cAAA,MAAIoC,MAAO,CAACC,aAAc,SAA1B,eACAvC,EAAAC,EAAAC,cAAA,KAAGsC,GAAG,WACHnC,KAAKkB,MAAME,SAEdzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZY,EAAM0B,IAAI,SAAC9B,EAAMe,GAChB,OAAO1B,EAAAC,EAAAC,cAACwC,EAADxB,OAAAyB,OAAA,CAAMC,IAAKlB,GAAWf,gBA9CzBE,aCZEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.59d113fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/toaster.e11f8c47.gif\";","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nlibrary.add(fab, fas);\n\nclass Icon extends React.Component {\n    render() {\n        return (\n            <a className={`icon ${this.props.big ? 'big' : ''}`} href={this.props.link}>\n                <FontAwesomeIcon icon={this.props.icon}/>\n            </a>\n        );\n    }\n}\n\nexport default Icon;","import React, { Component } from 'react';\n\nimport logo from '../images/toaster.gif';\nimport './App.css';\nimport Icon from './Icon';\n\nconst taglines = [\n  'I adventure and write code',\n  'DevOps & Site Reliability Engineer',\n  'Computer & Nature Lover',\n  'Cars, Computers, & the Outdoors'\n]\n\nconst icons = [\n  {icon: ['fab', 'instagram'], link: 'https://www.instagram.com/danstarner/'},\n  {icon: ['fab', 'twitter'], link: 'https://twitter.com/standarner'},\n  {icon: ['fab', 'facebook'], link: 'https://www.facebook.com/dancstarner'},\n  {icon: ['fab', 'dev'], link: 'https://dev.to/dstarner', big: true},\n  {icon: ['fas', 'rss-square'], link: 'https://blog.danstarner.com', big: true},\n  {icon: ['fab', 'github'], link: 'https://github.com/dstarner'},\n  {icon: ['fab', 'linkedin'], link: 'https://www.linkedin.com/in/danstarner/'},\n  {icon: ['fas', 'envelope'], link: 'mailto:starner.daniel5@gmail.com'},\n]\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      timer: null,\n      tagline: taglines[0],\n      index: 0,\n    };\n\n    this.getTagline = this.getTagline.bind(this);\n  }\n\n  componentDidMount() {\n    let timer = setInterval(this.tick.bind(this), 2000);\n    this.setState({timer});\n  }\n\n  componentWillUnmount() {\n    this.clearInterval(this.state.timer);\n  }\n\n  tick() {\n    this.setState({\n      tagline: this.getTagline()\n    });\n  }\n\n  getTagline() {\n    let index = this.state.index + 1;\n    if (index === taglines.length) index = 0;\n    this.setState({index});\n    return taglines[this.state.index];\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 style={{marginBottom: '.3px'}}>Dan Starner</h1>\n          <p id='tagline'>\n            {this.state.tagline}\n          </p>\n          <div className='icon-row'>\n            {icons.map((icon, index) => {\n              return <Icon key={index} {...icon}/>\n            })}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}